# -*- coding: utf-8 -*-
"""Edx IBM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYemVyPgh4Q3EdIuDY-_dylQeD9jdBal

# Intro

The value in the parentheses is called the
argument.

Lists and tuples, are called compound data types and are one of the key types of data structures in Python.

Sets and dictionaries are types of collections.
"""

type(1) #shows a data type of an expression

float(2) # converts int 2 to a float
int(3.4) # returns float to an int. Result is 3
type(True) # A Boolean can take on two values. The first value is true, just remember we use an uppercase T. Boolean values can also be False
#If you cast a 1 to a Boolean, you get a true. Similarly, if you cast a 0 to a Boolean, you get a false.

"""# Expressions & Variables

Expressions describe a type of operation that computers perform. Basic arithmetic operations like adding multiple numbers. 

We call the numbers **Operands** and math symbols - **Operators**.

25/5 will result in a float 5.0 if you want int value use double sign //

Python follows mathematical convention. E.g 2+2*2 = 6

We can use variables to store values which can be upadated.We can also perform operations on A and save the result to a new variable
"""

A = 10
print(A)
A = 3
print(A)

y = 15//A
print(y)

"""#String
In Python, a string is a sequence of characters. A string is contained within single or double quotes.

It is helpful to think of a string as an ordered sequence. Each element in the sequence can be accessed using an index represented by the array of numbers.  The **method find**, finds sub-strings. The argument is the sub-string you would like
to find. The output is the first index of the sequence.

***Strings are immutable.***
"""

name = "Andrius a"
capital = name.upper()
print(capital)

name.replace("A","AA")
print(name)

c = capital.replace("S","s")
print(c)

b = name.find("a")
print(b)

"""# Tuples & List
These are called compound data types and are one of the key types of data structures in Python.

Tuples are an ordered sequence.Tuples are expressed as comma-separated elements within parentheses. These are values inside the parentheses. In Python, there are different types: strings, integer, float. They can all be contained in a tuple, but the type of the variable is tuple.

Each element of a tuple can be accessed via an index. First element of a tuple starts from **0**.

**Tuples are immutable!!!** if we would like to manipulate a tuple, we must create a new tuple instead.

A tuple can contain other tuples as well as other complex data types; this is called nesting. We can access these elements using the standard indexing methods.

Lists are also an ordered sequence.  A list is represented with square brackets. In many respects lists are like tuples, one key difference is **they are mutable.** Lists can contain strings, floats, integers.
We can nest other lists. We also nest tuples and other data structures; the same indexing conventions apply for nesting.

Lists are mutable, therefore, we can change them.
For example, we apply the method extends by adding a "dot" followed by the name of the method, then parenthesis. The argument inside the parenthesis is a new list that we are going to concatenate to the original list.

We can delete an element of a list using the "del" command; we simply indicate the list item we would like to remove as an argument.

**We can convert a string to a list using split.** For example, the method split converts every group of characters separated by a space into an element of a list. We can use the split function to separate strings on a specific character, known as a delimiter. We simply pass the delimiter we would like to split on as an argument, in this case a comma.

You can clone lists. (see example below)
"""

ratings = (1,2,3,4,5,6,7,8)

tuple1 = ("Dance",2,4.5, "Disco")
type(tuple1)
print(tuple1[0]) # returns a first element - result is "Dance"

tuple2 = tuple1 + ("Go", 3.5, 222) #We can concatenate or combine tuples by adding them. Value "Dance" would still be index 0.
print(tuple2)

print(tuple2[0:3]) # returns first three elements
len(tuple2) # returns a lenght of a tuple

tuple3 = (1,3,("DD",3),4,5)
print(tuple3[2]) # a tuple inside in a tuple has one index value.
print(tuple3[2][1]) # after that we can access another values in a tuple.

list1 = [1,3,4,"DD","EE"]
list2 = list1 + [1.2,3,5,"cc,ss"]
print(list2[8])
list1.extend(["Andrius","AA","Lambo, Ferrari"]) # two new elements has last index numbers.
print(list1)

list1.append(["RS,VV,WW"]) # adds three new values as one new value as a list.
print(list1)

list1[0] ="New item instead of 1"
print(list1)

del(list1[2:3]) # deletes first three element in a list
print(list1)

"Hard rock".split #splits a string into a list separated by a space
"A,B,c,d,e".split(",") # split values into a list that had been specified by "," delimiter.

cc = [1,2,3]
dd = cc[:] #clones a list. Variable "cc" references one list. Variable “dd” references a new copy or clone of the original list. Now if you change “cc”, "dd" will not change.
cc[0] = 4
print(cc)
#help(cc) #provides a list of functions what you can do with a list

"""# Sets
Sets are a type of collection. This means that like lists and tuples, you
can input different python types. Unlike lists and tuples they are unordered.
This means sets do not record element position. Sets only have unique elements. To define a set, you use curly brackets You place the elements of a set within the curly brackets.

You can convert a list to a set by using the function **set**; this is called type-casting.
"""

set1 = {"A","b","b","c","d"}
len(set1) # result is 4.

list1 = [1,2,2,2,3,4]
newset = set(list1)